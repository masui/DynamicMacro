(defvar *dmacro-str* nil "Repeat String")
(setq dmacro-keys (concat *dmacro-key* *dmacro-key*))

(defun dmacro-exec ()
  "Detect the repetition of key operation and Run"
  (interactive)
  (let ((s (dmacro-get)))
    (if (null s)
        (message "Repetition of the operation can not be found")
      (execute-kbd-macro s)
      )
    ))

(defun dmacro-event (e)
  (cond
   ((integerp e) e)
   ((eq e 'backspace) 8)
   ((eq e 'tab) 9)
   ((eq e 'enter) 13)
   ((eq e 'return) 13)
   ((eq e 'escape) 27)
   ((eq e 'delete) 127)
   (t 0)
   ))

(defun dmacro-recent-keys ()
  (let ((s (recent-keys)) )
    (if (stringp s) s
      (concat (mapcar 'dmacro-event s))
      )
    ))

(defun dmacro-get ()
  (let ((rkeys (dmacro-recent-keys)) str)
    (if (string= dmacro-keys (substring rkeys (- (length dmacro-keys))))
        *dmacro-str*
      (setq str (dmacro-search (substring rkeys 0 (- (length *dmacro-key*)))))
      (if (null str)
          (setq *dmacro-str* nil)
        (let ((s1 (car str)) (s2 (cdr str)))
          (setq *dmacro-str* (concat s2 s1))
          (setq last-kbd-macro *dmacro-str*)
          (if (string= s1 "") *dmacro-str* s1)
          )))))

(defun dmacro-search (string)
  (let* ((str (dmacro-string-reverse string))
         (sptr  1)
         (dptr0 (dmacro-string-search (substring str 0 sptr) str sptr))
         (dptr dptr0)
         maxptr)
    (while (and dptr0
                (not (dmacro-string-search *dmacro-key* (substring str sptr dptr0))))
      (if (= dptr0 sptr)
          (setq maxptr sptr))
      (setq sptr (1+ sptr))
      (setq dptr dptr0)
      (setq dptr0 (dmacro-string-search (substring str 0 sptr) str sptr))
      )
    (if (null maxptr)
        (let ((predict-str (dmacro-string-reverse (substring str (1- sptr) dptr))))
          (if (dmacro-string-search *dmacro-key* predict-str)
              nil
            (cons predict-str (dmacro-string-reverse (substring str 0 (1- sptr)))))
          )
      (cons "" (dmacro-string-reverse (substring str 0 maxptr)))
      )
    ))

(defun dmacro-string-reverse (str)
  (concat "" (reverse (mapcar (function (lambda (x) x)) str))))

(defun dmacro-string-search (pat str &optional start)
  (let* ((len (length pat))
         (max (- (length str) len))
         p found
         )
    (setq p (if start start 0))
    (while (and (not found) (<= p max))
      (setq found (string= pat (substring str p (+ p len))))
      (if (not found) (setq p (1+ p)))
      )
    (if found p nil)
    ))

(provide 'dmacro)
